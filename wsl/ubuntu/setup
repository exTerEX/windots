#!/bin/sh

# Let script exit when a command fail
set -o errexit

# Add Personal Package Archives
if command -v add-apt-repository > /dev/null 2>&1; then
    # python PPA
    sudo add-apt-repository --enable-source --yes ppa:deadsnakes/ppa

    # R PPA
    sudo apt-add-repository --enable-source --yes ppa:marutter/rrutter4.0
    sudo apt-add-repository --enable-source --yes ppa:c2d4u.team/c2d4u4.0+

    # Golang
    sudo apt-add-repository --enable-source --yes ppa:longsleep/golang-backports
else
    echo "add-apt-repository not available"
fi

# Path to ubuntu dotfiles
ROOT=$(cd -P -- "$(dirname -- "$0")" && cd ../.. && pwd -P)
DOTFILES=$ROOT/wsl/ubuntu

# *********************************************************
# Create standard folders
# *********************************************************

if [ ! -d $HOME/bin ] ; then
    mkdir -p $HOME/bin
fi

if [ ! -d $HOME/.local/bin ] ; then
    mkdir -p $HOME/.local/bin
fi

if [ ! -d $HOME/.ssh ] ; then
    mkdir -p $HOME/.local/bin
fi

# *********************************************************
# Link folders
# *********************************************************

if [ ! -h $HOME/.custom ]; then
    ln -sf $DOTFILES/.custom $HOME/
    sudo chown -h $(whoami):$(whoami) $HOME/.custom
fi

# *********************************************************
# Install .gitconfig and git configurations
# *********************************************************

if [ -e $HOME/.gitconfig ]; then
    sudo mv $HOME/.gitconfig $HOME/.gitconfig.old
fi

sudo ln -sf $DOTFILES/git/.gitconfig $HOME/.gitconfig
sudo chown -h $(whoami):$(whoami) $HOME/.gitconfig

# *********************************************************
# Install ssh configurations and keys
# *********************************************************

if command -v openssh-client > /dev/null 2>&1; then
    sudo apt -y install --no-install-recommends openssh-client
fi

sudo ln -sf $ROOT/ssh/id_rsa $HOME/.ssh/id_rsa
sudo ln -sf $ROOT/ssh/id_rsa.pub $HOME/.ssh/id_rsa.pub
sudo ln -sf $ROOT/ssh/config $HOME/.ssh/config
sudo ln -sf $ROOT/ssh/known_hosts $HOME/.ssh/known_hosts

sudo chmod 600 $HOME/.ssh/*

# *********************************************************
# Install gpg configurations and keys
# *********************************************************

if command -v gpg2 > /dev/null 2>&1; then
    sudo apt -y install --no-install-recommends gpg2
fi

if [ ! -e $HOME/public_keys.gpg ]; then
    sudo ln -sf $ROOT/gpg/public_keys.gpg $HOME/public_keys.gpg
fi

if [ ! -e $HOME/private_keys.gpg ]; then
    sudo ln -sf $ROOT/gpg/private_keys.gpg $HOME/private_keys.gpg
fi

gpg2 --import $HOME/private_keys.gpg

sudo ln -sf $DOTFILES/gpg/gpg-agent.conf $HOME/gpg-agent.conf
sudo chown -h $(whoami):$(whoami) $HOME/gpg-agent.conf

# *********************************************************
# Vim
# *********************************************************

sudo ln -sf $DOTFILES/vim/.vimrc $HOME/.vimrc
sudo chown -h $(whoami):$(whoami) $HOME/.vimrc

# *********************************************************
# Conda
# *********************************************************

sh $DOTFILES/script/conda.sh

sudo ln -sf $ROOT/conda/.condarc $HOME/.condarc
sudo chown -h $(whoami):$(whoami) $HOME/.condarc

# *********************************************************
# Oh-my-bash installation
# *********************************************************

if [ -n $BASH_VERSION ]; then
    ##### FROM: Oh-My-Bash installer.sh #####

    # Copyright 2017-2020 Toan Nguyen and contributors (https://github.com/ohmybash/oh-my-bash/graphs/contributors)

    # Permission is hereby granted, free of charge, to any person obtaining a copy
    # of this software and associated documentation files (the "Software"), to deal
    # in the Software without restriction, including without limitation the rights
    # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    # copies of the Software, and to permit persons to whom the Software is
    # furnished to do so, subject to the following conditions:
    #
    # The above copyright notice and this permission notice shall be included in all
    # copies or substantial portions of the Software.
    #
    # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    # SOFTWARE.

    main() {
        # Use colors, but only if connected to a terminal, and that terminal
        # supports them.
        if which tput >/dev/null 2>&1; then
            ncolors=$(tput colors)
        fi
        if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
            RED="$(tput setaf 1)"
            GREEN="$(tput setaf 2)"
            YELLOW="$(tput setaf 3)"
            BLUE="$(tput setaf 4)"
            BOLD="$(tput bold)"
            NORMAL="$(tput sgr0)"
        else
            RED=""
            GREEN=""
            YELLOW=""
            BLUE=""
            BOLD=""
            NORMAL=""
        fi

        # Only enable exit-on-error after the non-critical colorization stuff,
        # which may fail on systems lacking tput or terminfo
        set -e

        # Checks the minium version of bash (v4) installed,
        # stops the installation if check fails
        if [ -n $BASH_VERSION ]; then
            bash_major_version=$(echo $BASH_VERSION | cut -d '.' -f 1)
            if [ "${bash_major_version}" -lt "4" ]; then
                printf "Error: Bash 4 required for Oh My Bash.\n"
                printf "Error: Upgrade Bash and try again.\n"
                exit 1
            fi
        fi

        if [ ! -n "$OSH" ]; then
            OSH=$HOME/.oh-my-bash
        fi

        if [ -d "$OSH" ]; then
            printf "${YELLOW}You already have Oh My Bash installed.${NORMAL}\n"
            printf "You'll need to remove $OSH if you want to re-install.\n"
            exit
        fi

        # Prevent the cloned repository from having insecure permissions. Failing to do
        # so causes compinit() calls to fail with "command not found: compdef" errors
        # for users with insecure umasks (e.g., "002", allowing group writability). Note
        # that this will be ignored under Cygwin by default, as Windows ACLs take
        # precedence over umasks except for filesystems mounted with option "noacl".
        umask g-w,o-w

        printf "${BLUE}Cloning Oh My Bash...${NORMAL}\n"
        hash git >/dev/null 2>&1 || {
            echo "Error: git is not installed"
            exit 1
        }
        # The Windows (MSYS) Git is not compatible with normal use on cygwin
        if [ "$OSTYPE" = cygwin ]; then
            if git --version | grep msysgit > /dev/null; then
            echo "Error: Windows/MSYS Git is not supported on Cygwin"
            echo "Error: Make sure the Cygwin git package is installed and is first on the path"
            exit 1
            fi
        fi
        env git clone --depth=1 https://github.com/ohmybash/oh-my-bash.git $OSH || {
            printf "Error: git clone of oh-my-bash repo failed\n"
            exit 1
        }

        printf "${BLUE}Looking for an existing bash config...${NORMAL}\n"
        if [ -f $HOME/.bashrc ] || [ -h $HOME/.bashrc ]; then
            printf "${YELLOW}Found ~/.bashrc.${NORMAL} ${GREEN}Backing up to ~/.bashrc.pre-oh-my-bash${NORMAL}\n";
            mv $HOME/.bashrc $HOME/.bashrc.pre-oh-my-bash;
        fi

        printf "${BLUE}Using the Oh My Bash template file and adding it to ~/.bashrc${NORMAL}\n"
        cp $OSH/templates/bashrc.osh-template $HOME/.bashrc
        sed "/^export OSH=/ c\\
        export OSH=$OSH
        " $HOME/.bashrc > $HOME/.bashrc-ombtemp
        mv -f $HOME/.bashrc-ombtemp $HOME/.bashrc

        # MOTD message :)
        printf '%s' "$GREEN"
        printf '%s\n' '         __                          __               __  '
        printf '%s\n' '  ____  / /_     ____ ___  __  __   / /_  ____ ______/ /_ '
        printf '%s\n' ' / __ \/ __ \   / __ `__ \/ / / /  / __ \/ __ `/ ___/ __ \'
        printf '%s\n' '/ /_/ / / / /  / / / / / / /_/ /  / /_/ / /_/ (__  ) / / /'
        printf '%s\n' '\____/_/ /_/  /_/ /_/ /_/\__, /  /_.___/\__,_/____/_/ /_/ '
        printf '%s\n' '                        /____/                            .... is now installed!'
        printf "%s\n" "Please look over the ~/.bashrc file to select plugins, themes, and options"
        printf "${BLUE}${BOLD}%s${NORMAL}\n" "To keep up on the latest news and updates, follow us on GitHub: https://github.com/ohmybash/oh-my-bash"
        # exec bash; source $HOME/.bashrc
    }

    ##### END #####

    # Run script only if oh-my-bash isn't installed
    if [[ ! -e $HOME/.oh-my-bash ]]; then
        main
    fi
fi

# *********************************************************
# Install custom .bashrc
# *********************************************************

if [ -n $BASH_VERSION ]; then
    sudo ln -sf $DOTFILES/bash/.bashrc $HOME/.bashrc
    sudo chown -h $(whoami):$(whoami) $HOME/.bashrc
fi

# *********************************************************
# Install custom .profile
# *********************************************************

ln -sf $DOTFILES/bash/.profile $HOME/.profile
chown -h $(whoami):$(whoami) $HOME/.profile

exec bash; source $HOME/.bashrc
